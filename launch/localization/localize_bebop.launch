<?xml version="1.0"?>
<launch>

    <arg name="car_frame_id" default="odom"/>
    <arg name="quad_frame_id" default="base_link"/>

    <!-- Because bebop doesn't publish the odom with a covariance -->
    <node pkg="foresight" type="odom_covariance.py"
        name="odom_covariance" output="screen">
        <remap from="odom_input" to="/bebop/odom" />
        <remap from="odom_output" to="bebop/odom_cov" />
        <param name="px" value="0.03" />
        <param name="py" value="0.03" />
        <param name="pz" value="0.03" />
        <param name="rx" value="0.0001" />
        <param name="ry" value="0.0001" />
        <param name="rz" value="0.0001" />
    </node>

    <!-- Provides a pose from the car to the bebop -->
    <include file="$(find decawave_localization)/launch/uwb_localize.launch">
        <arg name="car_frame_id" value="$(arg car_frame_id)"/>
        <arg name="pose_cov_topic" value="uwb_pose_cov"/>
        <arg name="sensor_noise" value="0.0003"/>
        <arg name="cov_x" value="0.1"/>
        <arg name="cov_y" value="0.1"/>
        <arg name="cov_z" value="0.1"/>
    </include>

    <!-- Publishes the imu offset -->
    <node pkg="foresight" type="relative_odom_publisher.py"
        name="relative_odom_publisher"
        output="screen">
        <param name="car_frame_id" value="$(arg car_frame_id)"/>
        <param name="frame_id" value="$(arg quad_frame_id)"/>
    </node>

    <!-- Estimates Bebop's odometry -->
    <node pkg="robot_localization" type="ukf_localization_node"
        name="odom_ukf_localization" clear_params="true">

        <param name="frequency" value="100"/>
        <param name="sensor_timeout" value="0.2"/>
        <param name="two_d_mode" value="false"/>

        <param name="map_frame" value="$(arg car_frame_id)"/>
        <param name="odom_frame" value="odom"/>
        <param name="base_link_frame" value="$(arg quad_frame_id)"/>
        <param name="world_frame" value="odom"/>

        <param name="transform_time_offset" value="0.0"/>

        <param name="odom0" value="/bebop/odom_cov"/>
        <param name="odom1" value="/odom_alt"/>

        <rosparam param="odom0_config">[false, false, false,
                                        true, true, true,
                                        true, true, true,
                                        false, false, false,
                                        false, false, false]</rosparam>

        <rosparam param="odom1_config">[false, false, true,
                                        false, false, false,
                                        false, false, false,
                                        false, false, false,
                                        false, false, false]</rosparam>

        <param name="odom0_differential" value="false"/>
        <param name="odom1_differential" value="false"/>
        <param name="odom0_relative" value="true"/>
        <param name="odom1_relative" value="false"/>
        <param name="print_diagnostics" value="true"/>

        <param name="odom0_queue_size" value="1"/>
        <param name="odom1_queue_size" value="1"/>
        <param name="debug"           value="false"/>
        <remap from="odometry/filtered" to="bebop/odom_filtered"/>
    </node>

    <!-- Fuses UWB position estimate with the odometry -->
    <node pkg="robot_localization" type="ukf_localization_node"
        name="ukf_localization" clear_params="true">
        <remap from="cmd_vel" to="/setpoint_vel"/>
        <param name="frequency" value="30"/>
        <param name="sensor_timeout" value="0.2"/>
        <param name="two_d_mode" value="false"/>

        <param name="map_frame" value="$(arg car_frame_id)"/>
        <param name="odom_frame" value="odom"/>
        <param name="base_link_frame" value="$(arg quad_frame_id)"/>
        <param name="world_frame" value="$(arg car_frame_id)"/>

        <param name="transform_time_offset" value="0.0"/>

        <param name="odom0" value="/bebop/odom_filtered"/>
        <param name="odom1" value="/odom_uwb_2d"/>
        <param name="odom2" value="/odom_uwb_3d"/>

        <rosparam param="odom0_config">[false, false, false,
                                        false, false, false,
                                        true, true, true,
                                        false, false, false,
                                        false, false, true]</rosparam>

        <rosparam param="odom1_config">[true, true, true,
                                        true, true, true,
                                        false, false, false,
                                        false, false, false,
                                        false, false, false]</rosparam>

        <rosparam param="odom2_config">[false, false, false,
                                        false, false, false,
                                        false, false, false,
                                        false, false, false,
                                        false, false, false]</rosparam>

        <param name="odom0_differential" value="false"/>
        <param name="odom1_differential" value="false"/>
        <param name="odom2_differential" value="false"/>

        <param name="odom0_relative" value="false"/>
        <param name="odom1_relative" value="false"/>
        <param name="odom2_relative" value="false"/>

        <!-- <param name="odom0_pose_rejection_threshold" value="100"/> -->

        <param name="print_diagnostics" value="true"/>

        <param name="odom0_queue_size" value="1"/>
        <param name="odom1_queue_size" value="1"/>
        <param name="odom2_queue_size" value="1"/>

        <param name="debug"           value="false"/>

        <param name="use_control" value="true"/>

        <!-- Whether the input (assumed to be cmd_vel) is a
            geometry_msgs/Twist or geometry_msgs/TwistStamped
            message. Defaults to false. -->
        <param name="stamped_control" value="false"/>

        <!-- The last issued control command will be used in prediction
            for this period. Defaults to 0.2. -->
        <param name="control_timeout" value="0.2"/>

        <!-- Which velocities are being controlled. Order is vx, vy, vz,
            vroll, vpitch, vyaw. -->
        <rosparam param="control_config">
            [true, true, true, true, true, true]
        </rosparam>

        <!-- Places limits on how large the acceleration term will be.
            Should match your robot's kinematics. -->
        <rosparam>
            acceleration_limits: [10, 10, 10, 10, 10, 10]
            deceleration_limits: [10, 10, 10, 10, 10, 10]
        </rosparam>

        <!-- If your robot cannot instantaneously reach its acceleration limit,
            the permitted change can be controlled with these gains -->
        <rosparam>
            acceleration_gains: [1, 1, 1, 1, 1, 1]
            deceleration_gains: [1, 1, 1, 1, 1, 1]
        </rosparam>

    </node>

    <!-- Starts trajectory server -->
    <node pkg="hector_trajectory_server" type="hector_trajectory_server"
        name="hector_trajectory_server">
        <param name="source_frame_name" value="base_link"/>
        <param name="target_frame_name" value="$(arg car_frame_id)"/>
        <param name="trajectory_publish_rate" value="10"/>
        <param name="trajectory_update_rate" value="10"/>
        <remap from="/trajectory" to="/path"/>
    </node>

    <node pkg="hector_trajectory_server" type="hector_trajectory_server"
        name="vicon_traj_server">
        <param name="source_frame_name" value="vicon/Ichiban/Ichiban"/>
        <param name="target_frame_name" value="$(arg car_frame_id)"/>
        <param name="trajectory_publish_rate" value="10"/>
        <param name="trajectory_update_rate" value="10"/>
        <remap from="/trajectory" to="/vicon_path"/>
    </node>

    <node pkg="hector_trajectory_server" type="hector_trajectory_server"
        name="ekf_traj_server">
        <param name="source_frame_name" value="base_link_ekf"/>
        <param name="target_frame_name" value="$(arg car_frame_id)"/>
        <param name="trajectory_publish_rate" value="10"/>
        <param name="trajectory_update_rate" value="10"/>
        <remap from="/trajectory" to="/ekf_path"/>
    </node>

</launch>
